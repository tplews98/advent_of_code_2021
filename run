#!/usr/bin/python3

"""Runner for Advent of Code 2021 executables."""


from __future__ import annotations

import argparse
import subprocess
import os
import time


def run_cmd(cmd: list[str], *, print_time: bool = False) -> None:
    """Run a subprocess command and optionally print the time to run it."""
    start = time.perf_counter()
    subprocess.run(cmd, check=True)
    end = time.perf_counter()
    total_time = end - start
    if print_time:
        if total_time > 1:
            time_str = f"{total_time:.3f}s"
        elif total_time > 10 ** -3:
            time_str = f"{total_time * 10 ** 3:.3f}ms"
        elif total_time > 10 ** -6:
            time_str = f"{total_time * 10 ** 6:.3f}us"
        else:
            time_str = f"{total_time * 10 ** 9:.0f}ns"
        print(f"Time to run (including python subprocess time): {time_str}")


class Day:
    """Class for running or compiling a day's source files."""

    repo_root = os.path.dirname(os.path.abspath(__file__))
    utils_file = os.path.join(repo_root, "src/utils.c")

    def __init__(self, day: int) -> None:
        if not 1 <= day <= 25:
            raise ValueError("Day must be between 1 and 25")

        self.day = day
        day_str = f"day_{self.day:02}"

        self.c_file = os.path.join(self.repo_root, f"src/{day_str}.c")
        self.input = os.path.join(self.repo_root, f"data/{day_str}_input.txt")
        self.test_input = os.path.join(
            self.repo_root, f"data/{day_str}_test_input.txt"
        )
        self.obj_file = os.path.join(self.repo_root, f"out/{day_str}")

    def __repr__(self) -> str:
        return f"{self.__class__.__name__}({self.day})"

    def check_day_exists(self, is_compile: bool = False) -> None:
        """Check the days .c file and input exist. Raises an error if not."""
        files_to_check = [self.c_file]

        if not is_compile:
            files_to_check.extend([self.input, self.test_input])

        for file_path in files_to_check:
            if not os.path.exists(file_path):
                raise FileNotFoundError(
                    f"'{file_path}' does not exist, cannot run for this day"
                )

        if not is_compile:
            if not os.path.exists(self.obj_file):
                raise FileNotFoundError(
                    f"'{self.obj_file}' does not exist. Try --compile first"
                )

    def compile(
        self, *, with_optimisation: bool = True, print_time: bool = False
    ) -> None:
        """Compile the day's source file."""
        if not os.path.exists(os.path.dirname(self.obj_file)):
            os.mkdir(os.path.dirname(self.obj_file))

        cmd = [
            "clang",
            "-g",
            "-Wall",
            self.c_file,
            self.utils_file,
            "-o",
            self.obj_file,
            "-lm",
        ]
        if with_optimisation:
            cmd.append("-O3")
        print(
            f"----- Compiling day {self.day} with"
            f"{'' if with_optimisation else 'out'} optimisation -----"
        )
        run_cmd(cmd, print_time=print_time)

    def run(
        self,
        *,
        test: bool = False,
        with_valgrind: bool = False,
        with_gdb: bool = False,
        print_time: bool = False,
    ) -> None:
        """Run the day's script."""
        if with_valgrind and with_gdb:
            raise ValueError("Cannot run with valgrind and gdb")

        txt_file = self.input if not test else self.test_input

        cmd = [self.obj_file, txt_file]
        if with_valgrind:
            cmd.insert(0, "valgrind")
        if with_gdb:
            self.compile(with_optimisation=False, print_time=print_time)
            cmd = ["gdb", "--args"] + cmd

        print(f"----- Day {self.day} -----")
        run_cmd(cmd, print_time=print_time)

        if with_gdb:
            self.compile(with_optimisation=False, print_time=print_time)


def parse_args() -> argparse.Namespace:
    """Setup parser and parse command line args."""

    def check_mutually_exclusive_arguments(pargs: argparse.Namespace) -> None:
        """
        Check if any mutually exclusive arguments have been given. Raise error
        if so.
        """
        template = "Cannot use {arg_1} and {arg_2} together"

        if pargs.compile:
            if pargs.test:
                raise Exception(
                    template.format(arg_1="--compile", arg_2="--test")
                )
            if pargs.valgrind:
                raise Exception(
                    template.format(arg_1="--compile", arg_2="--valgrind")
                )
            if pargs.gdb:
                raise Exception(
                    template.format(arg_1="--compile", arg_2="--gdb")
                )

        if pargs.gdb:
            if pargs.valgrind:
                raise Exception(
                    template.format(arg_1="--valgrind", arg_2="--gdb")
                )
            if pargs.day == "all":
                raise Exception("Can only use --gdb with a single day")

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "day", help="Day to run, or 'all' for all existing days"
    )
    parser.add_argument(
        "--compile",
        action="store_true",
        help="Compile source file before running",
    )
    parser.add_argument(
        "--valgrind",
        action="store_true",
        help="Run with valgrind to test for memory leaks",
    )
    parser.add_argument(
        "--gdb",
        action="store_true",
        help=(
            "Run with gdb. This will recompile without optimisation before "
            "and also recompile with optimisation afterwards"
        ),
    )
    parser.add_argument(
        "--test",
        action="store_true",
        help="Run with test input instead of real input",
    )
    parser.add_argument(
        "--time",
        action="store_true",
        help=(
            "Print the time to run the executable (including python "
            "subprocess time)"
        ),
    )

    pargs = parser.parse_args()

    try:
        pargs.day = int(pargs.day)
    except ValueError:
        if pargs.day != "all":
            raise ValueError("Day must be between 1 and 25 or 'all'") from None
    else:
        if not 1 <= pargs.day <= 25:
            raise ValueError("Day must be between 1 and 25, or 'all'")

    check_mutually_exclusive_arguments(pargs)

    return pargs


def get_days_to_run(pargs: argparse.Namespace) -> list[Day]:
    """
    Find the days to run commands with.

    If pargs.day is an integer, that day is used.
    If pargs.day is 'all', all existing days are used.

    """
    days: list[Day] = []

    if pargs.day != "all":
        day = Day(pargs.day)
        day.check_day_exists(is_compile=pargs.compile)
        days.append(day)
    else:
        for day_int in range(1, 26):
            try:
                day = Day(day_int)
                day.check_day_exists(is_compile=pargs.compile)
                days.append(day)
            except FileNotFoundError:
                # Day solution doesn't exist.
                continue

        if not days:
            print(
                "No days have all necessary files to run, maybe try --compile"
            )
            return days

        # Check that days are consecutive, print error if any were missing for
        # which a later day exists.
        day_ints = [day.day for day in days]
        missing_days = sorted(set(range(1, max(day_ints))) - set(day_ints))
        if missing_days:
            print(
                "Some days were missing where a later day exists: "
                f"{', '.join(str(day_int) for day_int in missing_days)}"
            )

    return days


def main() -> None:
    """Main runner. Parse args and compile or run a day's script."""
    pargs = parse_args()

    days = get_days_to_run(pargs)
    for day in days:
        if pargs.compile:
            day.compile(print_time=pargs.time)
        else:
            day.run(
                test=pargs.test,
                with_valgrind=pargs.valgrind,
                with_gdb=pargs.gdb,
                print_time=pargs.time,
            )


if __name__ == "__main__":
    main()
